from telegram import Update
from telegram.ext import ContextTypes
import logging
from dotenv import load_dotenv
import os
import requests
import random
from datetime import datetime, timedelta
import re

load_dotenv()
logger = logging.getLogger(__name__)

class Handlers:
    def __init__(self, db=None):
        self.bot_names = ["–±–æ—Ç", "–ª—ë–≤–∞", "–ª–∏–º–æ–Ω–∞–¥–Ω—ã–π", "–¥—Ä—É–∂–∏—â–µ", "–ª–µ–≤–∞", "–ª–µ–≤"]
        self.db = db
        self.command_patterns = {
            r'(^|\s)(—à—É—Ç–∫|–∞–Ω–µ–∫–¥–æ—Ç|–ø–æ—à—É—Ç–∏|—Ä–∞—Å—Å–º–µ—à–∏)': self.joke,
            r'(^|\s)(—Ä–∞—Å—Å–∫–∞–∂–∏|–¥–∞–π|—Ö–æ—á—É|–≥–æ)\s*(—à—É—Ç–∫—É|–∞–Ω–µ–∫–¥–æ—Ç)': self.joke,            
            r'(^|\s)(–∫–∞–∫–∞—è|—É–∑–Ω–∞—Ç—å|—Å–∫–∞–∂–∏)\s*(–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É)\s*(–≤|–ø–æ)?\s*([–∞-—è—ë]+)': self.weather,
            r'(^|\s)(–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É)\s*(–≤|–ø–æ)?\s*([–∞-—è—ë]+)': self.weather,
            r'(^|\s)(–∫–æ–º–∞–Ω–¥—ã|—á—Ç–æ —É–º–µ–µ—à—å|–ø–æ–º–æ—â—å|help)': self.info,
            r'(^|\s)(–∑–≤–∞–Ω–∏—è|—Ä–æ–∑—ã–≥—Ä—ã—à|—Ç–∏—Ç—É–ª—ã)': self.assign_titles,
            r'(^|\s)(—Å—Ç–∞—Ä—Ç|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏–≤–µ—Ç|hello)': self.start_handler,
            r'(^|\s)(—Ü—Ç—Ç)': lambda u, c: self.handle_quote_command(u, c),
            r'(^|\s)(—Å—Ç–∞—Ä—Ç|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏–≤–µ—Ç|hello)': lambda u, c: self.start_handler(u, c)
        }
        
    def is_message_for_bot(self, text: str) -> bool:
    
        if not text:
            return False
            
        first_word = text.split()[0].lower()
        if first_word in self.bot_names:
            return True
            
        return any(name in text.lower() for name in self.bot_names)

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    
        if update.message.reply_to_message and update.message.text.lower().strip() == "—Ü—Ç—Ç":
            await self._add_quote_from_reply(update, context)
            return
        
        user_text = update.message.text.lower() if update.message.text else ""
    
        if not self.is_message_for_bot(user_text):
            return

        cleaned_text = re.sub(r'^\s*(–±–æ—Ç|–ª—ë–≤–∞|–ª–µ–≤–∞|–¥—Ä—É–∂–∏—â–µ)[,\.!]*\s*', '', user_text)
    
    
        for pattern, handler in self.command_patterns.items():
            if re.search(pattern, cleaned_text):
                await handler(update, context)  # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ç–æ–ª—å–∫–æ update –∏ context
                return
            
        await self.handle_text(update, context)

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        
        try:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –õ—ë–≤–∞. –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è:\n"
                f"- –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
                f"- –°–æ–æ–±—â–∏—Ç—å –ø–æ–≥–æ–¥—É\n"
                f"- –†–∞–∑—ã–≥—Ä–∞—Ç—å –∑–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ\n"
                f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'"
            )
        except Exception as e:
            logger.error(f"Start error: {e}")
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–≥–æ–¥—ã"""
        try:
            # –ò—â–µ–º –≥–æ—Ä–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
            match = re.search(r'–ø–æ–≥–æ–¥[–∞-—è]*\s*(?:–≤|–ø–æ)?\s*([–∞-—è—ë]+)', text)
            city = match.group(1) if match else None
            
            if not city:
                await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ–µ–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?' –∏–ª–∏ '–õ–µ–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ü–∏—Ç–µ—Ä–µ'")
                return

            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–≥–æ–¥–µ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def joke(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —à—É—Ç–æ–∫"""
        try:
            url = "http://rzhunemogu.ru/RandJSON.aspx?CType=1"  
            response = requests.get(url, timeout=5)
            
            if response.status_code != 200:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
        
            joke_text = response.text.replace('{"content":"', '').replace('"}', '')
            await update.message.reply_text(joke_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —à—É—Ç–∫–µ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        
        try:
            commands = [
                "–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:",
                "- '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'",
                "- '–õ—ë–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ'",
                "- '–õ—ë–≤–∞, —Ä–∞–∑—ã–≥—Ä–∞–π –∑–≤–∞–Ω–∏—è'",
                "- '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
            ]
            await update.message.reply_text("\n".join(commands))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ info: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def assign_titles(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        
        try:
            chat_id = update.message.chat.id
            last_called = context.chat_data.get('last_called')
            
            if last_called and datetime.now() - last_called < timedelta(hours=24):
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –∫–æ—Ç–∏–∫")
                return
            
            admins = await context.bot.get_chat_administrators(chat_id)
            human_members = [admin.user for admin in admins if not admin.user.is_bot]

            if len(human_members) < 2:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
                return
            
            chosen_members = random.sample(human_members, 2)
            title_x = chosen_members[0]
            title_y = chosen_members[1]
            
            result_message = (
                f"üéâ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–≤–∞–Ω–∏—è:\n"
                f"üèÜ –ö–∏—Å–æ —á–∞—Ç–∞: {title_x.mention_html()}\n"
                f"ü•á –•–£–ô —á–∞—Ç–∞: {title_y.mention_html()}"
            )

            sent_message = await update.message.reply_text(result_message, parse_mode="HTML")
            await context.bot.pin_chat_message(chat_id, sent_message.message_id)
            context.chat_data["last_called"] = datetime.now()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ assign_titles: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, cleaned_text: str):
        
        greetings = ["–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòÉ", "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª! üëç", "–ô–æ—É! –ß—ë –∫–∞–∫? üòé"]
        farewells = ["–ü–æ–∫–∞-–ø–æ–∫–∞! üñêÔ∏è", "–£–∂–µ —É—Ö–æ–¥–∏—à—å? –ù—É –ª–∞–¥–Ω–æ... üò¢", "–î–æ —Å–∫–æ—Ä–æ–≥–æ! ü•∫"]

        if any(word in cleaned_text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π"]):
            await update.message.reply_text(random.choice(greetings))
        elif any(word in cleaned_text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ø—Ä–æ—â–∞–π"]):
            await update.message.reply_text(random.choice(farewells))
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in cleaned_text:
            await update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—ë–≤–∞ –õ–∏–º–æ–Ω–∞–¥–æ–≤! üéâ")
        else:
            neutral_answers = [
                "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –ø–æ–Ω—è–ª... ü§î",
                "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å? üßê",
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
            ]
            await update.message.reply_text(random.choice(neutral_answers))
            
            
            
    async def _add_quote_from_reply(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
  
        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        if not update.message.reply_to_message:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        original = update.message.reply_to_message
        user = update.message.from_user
    
        if not original.text:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        text = original.text.strip()
        
        if len(text) > 500:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        if len(text) < 5:
            await update.message.reply_text("‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
            return
        
        try:
            if self.db.add_quote(user.id, user.full_name, text):
                username = f"@{user.username}" if user.username else user.full_name
                await update.message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                await original.reply_text(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç {username}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    
        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        try:
            quote = self.db.get_random_quote()
            if quote and 'text' in quote and 'user_name' in quote:
                response = f"üìå –¶–∏—Ç–∞—Ç–∞ #{quote.get('id', '')}:\n\n{quote['text']}\n\n‚Äî {quote['user_name']}"
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã")
            
            
            
    # –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ–±–∞–≥—Ö–∞–Ω—Ç–µ—Ä
    
    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    
        self.db.debug_quotes()  
    
        quote = self.db.get_random_quote()
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞: {quote}")  
    
        if quote:
            await update.message.reply_text(f"–¶–∏—Ç–∞—Ç–∞ #{quote['id']}:\n{quote['text']}")
        else:
            await update.message.reply_text("–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")        