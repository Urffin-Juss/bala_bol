from telegram import Update
from telegram.ext import ContextTypes
import logging
from dotenv import load_dotenv
import os
import requests
import random
from datetime import datetime, timedelta
import re
from pathlib import Path
from models import QuoteDB, Feedback, GossipDB
from typing import Optional, Dict, Any
import asyncio
from html import escape




load_dotenv()
logger = logging.getLogger(__name__)


class Handlers:
    def __init__(self, db: QuoteDB, feedback: Feedback):

        self.deepseek_api_key = os.getenv("DEEPSEEK_API_KEY")
        self.deepseek_api_url = "https://api.deepseek.com/v1/chat/completions"
        self.bot_names = ["–±–æ—Ç", "–ª–µ–≤"]
        self.db = db
        self.feedback = feedback
        self.wisdom_quotes = []
        self.gossip_db = GossipDB()  # üëà –Ω–æ–≤–æ–µ
        self.gossip_window_hours = int(os.getenv("GOSSIP_WINDOW_HOURS", "12"))
        self.gossip_limit = int(os.getenv("GOSSIP_LIMIT", "250"))
        self.deepseek_api_key = os.getenv("DEEPSEEK_API_KEY", "").strip()
        self.deepseek_api_url = os.getenv(
            "DEEPSEEK_API_URL",
            "https://api.deepseek.com/v1/chat/completions"
        ).strip()
        # === DeepSeek –¥–∏–∞–ª–æ–≥ ===
        self.dialog_on: dict[int, bool] = {}  # chat_id -> –≤–∫–ª—é—á—ë–Ω –ª–∏ —Ä–µ–∂–∏–º
        self.dialog_history: dict[int, list] = {}  # chat_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.DIALOG_MAX_TURNS = int(os.getenv("DIALOG_MAX_TURNS", "12"))  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–ø–ª–∏–∫ –¥–µ—Ä–∂–∞—Ç—å
        self.DIALOG_MAX_CHARS = int(os.getenv("DIALOG_MAX_CHARS", "1500"))  # –∑–∞—â–∏—Ç–∞ –æ—Ç ‚Äú–ø–æ—Ä—Ç—è–Ω–æ–∫‚Äù
        # —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –º–æ–∂–Ω–æ –ø—Ä–∞–≤–∏—Ç—å –≤ .env, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç:
        self.dialog_system = os.getenv("DIALOG_SYSTEM",
                                       "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –õ–µ–≤. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
                                       "–°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –∫–æ–¥ ‚Äî –¥–∞–≤–∞–π —Ä–∞–±–æ—á–∏–µ –ø—Ä–∏–º–µ—Ä—ã. "
                                       "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî —É—Ç–æ—á–Ω—è–π.")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –º—É–¥—Ä–æ—Å—Ç–∏
        self._load_wisdom_quotes()

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥
        self.command_patterns = {
            # –®—É—Ç–∫–∏ (—Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É—é—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
            r'—à—É—Ç–∫[–∞—É–∏]|–∞–Ω–µ–∫–¥–æ—Ç|–ø–æ—à—É—Ç–∏|—Ä–∞—Å—Å–º–µ—à–∏|–ø—Ä–∏–∫–æ–ª$': self.joke,
            r'—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É|–¥–∞–π —à—É—Ç–∫—É|—Ö–æ—á—É —à—É—Ç–∫—É|–≥–æ —à—É—Ç–∫—É$': self.joke,

            # –ü–æ–≥–æ–¥–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
            r'(?:–∫–∞–∫–∞—è\s+)?–ø–æ–≥–æ–¥[–∞-—è]*.*$': self.weather,
            r'–ø–æ–≥–æ–¥–∞(?: –≤| –ø–æ)? [–∞-—è—ë]{3,}$': self.weather,

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            r'–∫–æ–º–∞–Ω–¥—ã|—á—Ç–æ —É–º–µ–µ—à—å|–ø–æ–º–æ—â—å|help|—Å–ø—Ä–∞–≤–∫–∞$': self.info,

            # –ó–≤–∞–Ω–∏—è/—Ç–∏—Ç—É–ª—ã
            r'–∑–≤–∞–Ω–∏—è|—Ä–æ–∑—ã–≥—Ä—ã—à|—Ç–∏—Ç—É–ª—ã|—Ä–∞–Ω–≥–∏$': self.assign_titles,

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
            r'—Å—Ç–∞—Ä—Ç$|–Ω–∞—á–∞—Ç—å$|–ø—Ä–∏–≤–µ—Ç$|hello$|hi$|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π$': self.start_handler,

            # –¶–∏—Ç–∞—Ç—ã
            r'—Ü—Ç—Ç$|—Ü–∏—Ç–∞—Ç[–∞—É—ã]$|–∑–∞–ø–æ–º–Ω–∏$': self.handle_quote_command,

            # –ú—É–¥—Ä–æ—Å—Ç—å
            r'–º—É–¥—Ä–æ—Å—Ç[—å–∏]$|—Å–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å$|–¥–∞–π –º—É–¥—Ä–æ—Å—Ç—å$|—Å–æ–≤–µ—Ç$': self.wisdom,

            # DeepSeek
            r'–æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å (.+)$': self.ask_deepseek,
            r'(?:–æ—Ç–≤–µ—Ç—å|–æ–±—ä—è—Å–Ω–∏|—Å–∫–∞–∂–∏|—á—Ç–æ –¥—É–º–∞–µ—à—å) (.+)$': self.ask_deepseek,

            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            r'–æ–±—Ä–∞—Ç–Ω[–∞—É—é]|—Ñ–∏–¥–±–µ–∫|–æ—Ç–∑—ã–≤|—Å–æ–æ–±—â–∏ –æ–± –æ—à–∏–±–∫–µ|–±–∞–≥—Ä–µ–ø–æ—Ä—Ç$': self._handle_feedback,
            r'–ø—Ä–µ–¥–ª–æ–∂[–∏—å]|–∏–¥–µ[—è—é]$': self._handle_feedback,

            # –°–ø–ª–µ—Ç–Ω–∏
            r'—Å–ø–ª–µ—Ç–Ω[–∏—å—è]$|–¥–∞–π —Å–ø–ª–µ—Ç–Ω–∏$|—á—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ$': self.gossip,

            # –î–∏–∞–ª–æ–≥
            r'–¥–∏–∞–ª–æ–≥ (?:–≤–∫–ª—é—á–∏|on|—Å—Ç–∞—Ä—Ç)$': self.dialog_enable,
            r'–¥–∏–∞–ª–æ–≥ (?:–≤—ã–∫–ª—é—á–∏|off|—Å—Ç–æ–ø)$': self.dialog_disable,
            r'–¥–∏–∞–ª–æ–≥ (?:—Å–±—Ä–æ—Å|–∑–∞–±—É–¥—å)$': self.dialog_reset_cmd,
            r'–¥–∏–∞–ª–æ–≥ —Å—Ç–∞—Ç—É—Å$': self.dialog_status,






        }

    def _load_wisdom_quotes(self):

        try:
            current_dir = Path(__file__).parent
            quotes_file = current_dir / "data" / "wisdom_quotes.txt"
            with open(quotes_file, "r", encoding="utf-8") as f:
                for line in f:
                    if "|" in line:
                        text, author = line.strip().split("|", 1)
                        self.wisdom_quotes.append({
                            "text": text,
                            "author": author
                        })
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.wisdom_quotes)} —Ü–∏—Ç–∞—Ç –º—É–¥—Ä–æ—Å—Ç–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
            self.wisdom_quotes = []

    async def _handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        await self.feedback.handle_feedback(update, context)

    def is_message_for_bot(self, text: str) -> bool:

        text_lower = text.lower()
        return any(name in text_lower for name in self.bot_names)

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
        - –õ–æ–≥–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è "—Å–ø–ª–µ—Ç–µ–Ω"
        - –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–ª–µ–≤' / '–ª—ë–≤–∞'
        - –ß–∏—Å—Ç–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        - –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–≥–æ–¥—ã
        """
        try:
            # 0) –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not update.message or not update.message.text:
                return

            # 1) –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "—Å–ø–ª–µ—Ç–µ–Ω" (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã)
            try:
                txt = update.message.text.strip()
                if getattr(self, "gossip_db", None) and 1 <= len(txt) <= 1000:
                    u = update.message.from_user
                    self.gossip_db.add_message(
                        chat_id=update.effective_chat.id,
                        user_id=(u.id if u else None),
                        user_name=(u.full_name if u else "Unknown"),
                        text=txt
                    )
            except Exception:
                # –Ω–µ –º–µ—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ, –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ç–∫–Ω—É–ª–æ—Å—å
                pass

            # 2) –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            text = update.message.text.lower()

            # 3) –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –±–æ—Ç–∞ —Å—Ç–æ–∏—Ç –í –ù–ê–ß–ê–õ–ï
            is_direct_address = any(
                re.match(rf'^{re.escape(name)}[\s,!?.]+', text)
                for name in self.bot_names  # –æ–∂–∏–¥–∞–µ—Ç—Å—è ["–ª—ë–≤–∞", "–ª–µ–≤"]
            )
            if not is_direct_address:
                return

            # 4) –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ ("–ª–µ–≤", "–ª—ë–≤–∞") –∏ –≤–µ–¥—É—â–∏–µ –∑–Ω–∞–∫–∏/–ø—Ä–æ–±–µ–ª—ã
            cleaned_text = re.sub(
                rf'^({"|".join(map(re.escape, self.bot_names))})[\s,!?.]*\s*',
                '',
                text
            ).strip()

            # 5) –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ–≥–æ–¥—ã (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏–º –≥–æ—Ä–æ–¥ –¥–∞–ª—å—à–µ –≤ self.weather)
            if re.match(r'^(?:–∫–∞–∫–∞—è\s+)?–ø–æ–≥–æ–¥[–∞-—è]*\b', cleaned_text):
                await self.weather(update, context, cleaned_text=cleaned_text)
                return

            # 6) –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for pattern, handler in self.command_patterns.items():
                if re.fullmatch(pattern, cleaned_text):
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                    if handler is self.weather:
                        await handler(update, context, cleaned_text=cleaned_text)
                    else:
                        await handler(update, context)
                    return

            # 7) –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–∞—Ç—á–∏–ª–æ—Å—å
                if self._dialog_enabled(update.effective_chat.id):
                    # –ø–æ–¥–¥–µ—Ä–∂–∏–º —Ñ–æ—Ä–º—É "–¥–∏–∞–ª–æ–≥ ..."
                    lt = cleaned_text.lower()
                    if lt.startswith("–¥–∏–∞–ª–æ–≥ "):
                        cleaned_text = cleaned_text[7:].strip()
                        if not cleaned_text:
                            await update.message.reply_text("–°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ üôÇ")
                            return
                    await self.dialog_answer(update, context, cleaned_text)
                    return

            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    def _help_text(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ —Å —É—á—ë—Ç–æ–º –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ñ–∏—á."""
        meteorf_on = getattr(self, "meteorf_enabled", False)
        gossip_on = getattr(self, "gossip_db", None) is not None
        deepseek_on = bool(getattr(self, "deepseek_api_key", None))

        lines = []
        lines.append("üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –õ–µ–≤. –ü–∏—à–∏ –º–æ—ë –∏–º—è –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n")
        lines.append("üìö <b>–ß—Ç–æ —è —É–º–µ—é</b>:")

        # –ü–æ–≥–æ–¥–∞ (OpenWeather)
        lines.append("‚Ä¢ üå¶ <b>–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å</b>:")
        lines.append("  <code>–õ–µ–≤ –ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞</code>")
        lines.append("  <code>–õ–µ–≤ –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ</code>")

        # –ü—Ä–æ–≥–Ω–æ–∑ MeteoRF ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if meteorf_on:
            lines.append("‚Ä¢ üóì <b>–ü—Ä–æ–≥–Ω–æ–∑ –ì–∏–¥—Ä–æ–º–µ—Ç—Ü–µ–Ω—Ç—Ä–∞</b>:")
            lines.append("  <code>–õ–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –ú–æ—Å–∫–≤–∞</code>")
            lines.append("  <code>–õ–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –ö–∞–∑–∞–Ω—å</code>")

        # –¶–∏—Ç–∞—Ç—ã
        lines.append("‚Ä¢ üìù <b>–¶–∏—Ç–∞—Ç—ã –∏–∑ —á–∞—Ç–∞</b>:")
        lines.append("  ‚Äî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ): <code>—Ü—Ç—Ç</code>")
        lines.append("  ‚Äî –°–ª—É—á–∞–π–Ω–∞—è: <code>–õ–µ–≤ —Ü–∏—Ç–∞—Ç–∞</code>  (–ø–æ–∫–∞–∂—É —Ç–µ–∫—Å—Ç –∏ –∞–≤—Ç–æ—Ä–∞)")

        # –®—É—Ç–∫–∏ / –º—É–¥—Ä–æ—Å—Ç—å
        lines.append("‚Ä¢ üòÇ <b>–®—É—Ç–∫–∏</b>: <code>–õ–µ–≤ —à—É—Ç–∫—É</code>  |  üß† <b>–ú—É–¥—Ä–æ—Å—Ç—å</b>: <code>–õ–µ–≤ –º—É–¥—Ä–æ—Å—Ç—å</code>")

        # –°–ø–ª–µ—Ç–Ω–∏
        if gossip_on:
            lines.append("‚Ä¢ ü´ñ <b>–°–ø–ª–µ—Ç–Ω–∏</b> (–¥–∞–π–¥–∂–µ—Å—Ç —á–∞—Ç–∞): <code>–õ–µ–≤ —Å–ø–ª–µ—Ç–Ω–∏</code>")

        # DeepSeek QA
        if deepseek_on:
            lines.append("‚Ä¢ ü§ñ <b>–í–æ–ø—Ä–æ—Å—ã –∫ –ò–ò</b>:")
            lines.append("  <code>–õ–µ–≤ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN</code>")
            lines.append("  <code>–õ–µ–≤ –æ–±—ä—è—Å–Ω–∏ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–µ–±—Ö—É–∫</code>")

        # –ó–≤–∞–Ω–∏—è
        lines.append("‚Ä¢ üèÖ <b>–ó–≤–∞–Ω–∏—è/—Ä–æ–∑—ã–≥—Ä—ã—à</b>: <code>–õ–µ–≤ –∑–≤–∞–Ω–∏—è</code>")

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        lines.append("‚Ä¢ üì® <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>: <code>–õ–µ–≤ —Ñ–∏–¥–±–µ–∫</code> –∏–ª–∏ <code>–õ–µ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</code>")

        # –°–ø—Ä–∞–≤–∫–∞
        lines.append("\n‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>: <code>–õ–µ–≤ –ø–æ–º–æ—â—å</code> –∏–ª–∏ <code>–õ–µ–≤ –∫–æ–º–∞–Ω–¥—ã</code>")
        lines.append("‚öôÔ∏è –¢—Ä–∏–≥–≥–µ—Ä: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ <u>–Ω–∞—á–∏–Ω–∞—Ç—å—Å—è</u> —Å ¬´–õ–µ–≤¬ª –∏–ª–∏ ¬´–õ—ë–≤–∞¬ª.")
        return "\n".join(lines)

        # –î–∏–∞–ª–æ–≥
        lines.append("‚Ä¢ üó£ <b>–î–∏–∞–ª–æ–≥ —Å –ò–ò</b>:")
        lines.append("  <code>–õ–µ–≤ –¥–∏–∞–ª–æ–≥ –≤–∫–ª—é—á–∏</code> / <code>–õ–µ–≤ –¥–∏–∞–ª–æ–≥ –≤—ã–∫–ª—é—á–∏</code>")
        lines.append("  <code>–õ–µ–≤ –¥–∏–∞–ª–æ–≥ —Å–±—Ä–æ—Å</code> / <code>–õ–µ–≤ –¥–∏–∞–ª–æ–≥ —Å—Ç–∞—Ç—É—Å</code>")

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è."""
        try:
            user = update.effective_user.full_name if update.effective_user else "–¥—Ä—É–≥"
            text = f"–ü—Ä–∏–≤–µ—Ç, {user}!\n\n" + self._help_text()
            await update.message.reply_text(text, parse_mode="HTML", disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"start_handler error: {e}", exc_info=True)

    async def info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        try:
            await update.message.reply_text(self._help_text(), parse_mode="HTML", disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"info error: {e}", exc_info=True)

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE, city: Optional[str] = None):

        try:

            if city is None:
                user_text = update.message.text.lower()
                match = re.search(r'–ø–æ–≥–æ–¥[–∞-—è]*\s*(?:–≤|–ø–æ)?\s*([\w\- –∞-—è—ë]{3,})$', user_text)
                city = match.group(1).strip() if match else None

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ–µ–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?' –∏–ª–∏ '–õ–µ–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ü–∏—Ç–µ—Ä–µ'")
                return


            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ weather: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def wisdom(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            if not self.wisdom_quotes:
                await update.message.reply_text("–ë–∞–∑–∞ –º—É–¥—Ä–æ—Å—Ç–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞ üò¢")
                return

            quote = random.choice(self.wisdom_quotes)
            response = f"¬´{quote['text']}¬ª\n\n‚Äî {quote['author']}"
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ wisdom: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–¥—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")



    async def weather(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            city: Optional[str] = None,
            cleaned_text: Optional[str] = None
    ):
        try:
            # 1) –≥–æ—Ä–æ–¥
            if not city:
                city = self._extract_city(cleaned_text or "")

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ—ë–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ö–∞–∑–∞–Ω–∏?' –∏–ª–∏ '–õ—ë–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ'"
                )
                return

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ–µ–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?' –∏–ª–∏ '–õ–µ–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ü–∏—Ç–µ—Ä–µ'")
                return

            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)


        except Exception as e:

            logger.error(f"–û—à–∏–±–∫–∞ –≤ weather: {e}", exc_info=True)

            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


    async def joke(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            url = "http://rzhunemogu.ru/RandJSON.aspx?CType=1"
            response = requests.get(url, timeout=5)

            if response.status_code != 200:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return

            joke_text = response.text.replace('{"content":"', '').replace('"}', '')
            await update.message.reply_text(joke_text)
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —à—É—Ç–∫–µ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")



    async def assign_titles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            chat_id = update.message.chat.id
            last_called = context.chat_data.get('last_called')

            if last_called and datetime.now() - last_called < timedelta(hours=24):
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –∫–æ—Ç–∏–∫")
                return

            admins = await context.bot.get_chat_administrators(chat_id)
            human_members = [admin.user for admin in admins if not admin.user.is_bot]

            if len(human_members) < 2:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
                return

            chosen_members = random.sample(human_members, 2)
            title_x = chosen_members[0]
            title_y = chosen_members[1]

            result_message = (
                f"üéâ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–≤–∞–Ω–∏—è:\n"
                f"üèÜ –ö–∏—Å–æ —á–∞—Ç–∞: {title_x.mention_html()}\n"
                f"ü•á –•–£–ô —á–∞—Ç–∞: {title_y.mention_html()}"
            )

            sent_message = await update.message.reply_text(result_message, parse_mode="HTML")
            await context.bot.pin_chat_message(chat_id, sent_message.message_id)
            context.chat_data["last_called"] = datetime.now()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ assign_titles: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not update.message or not update.message.text:
            return

        user_text = update.message.text.lower()
        greetings = ["–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòÉ", "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª! üëç", "–ô–æ—É! –ß—ë –∫–∞–∫? üòé"]
        farewells = ["–ü–æ–∫–∞-–ø–æ–∫–∞! üñêÔ∏è", "–£–∂–µ —É—Ö–æ–¥–∏—à—å? –ù—É –ª–∞–¥–Ω–æ... üò¢", "–î–æ —Å–∫–æ—Ä–æ–≥–æ! ü•∫"]

        if any(word in user_text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π"]):
            await update.message.reply_text(random.choice(greetings))
        elif any(word in user_text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ø—Ä–æ—â–∞–π"]):
            await update.message.reply_text(random.choice(farewells))
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in user_text:
            await update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—ë–≤–∞ –õ–∏–º–æ–Ω–∞–¥–æ–≤! üéâ")
        else:
            neutral_answers = [
                "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –ø–æ–Ω—è–ª... ü§î",
                "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å? üßê",
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
            ]
            await update.message.reply_text(random.choice(neutral_answers))

    async def add_quote_from_reply(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        if not update.message.reply_to_message:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        original = update.message.reply_to_message

        # –¢–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –∏ –±—ã–ª–æ)
        if not (original.text and original.text.strip()):
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        text = original.text.strip()
        if len(text) > 500:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        if len(text) < 5:
            await update.message.reply_text("‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
            return

        # === –í–ê–ñ–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ê–í–¢–û–†–ê —Ü–∏—Ç–∞—Ç—ã ===
        author_id = None
        author_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

        if original.from_user:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            au = original.from_user
            author_id = au.id
            author_name = au.full_name
            author_display = f"@{au.username}" if au.username else au.full_name
        elif getattr(original, "forward_from", None):
            # –§–æ—Ä–≤–∞—Ä–¥ —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º –∞–≤—Ç–æ—Ä–æ–º
            au = original.forward_from
            author_id = au.id
            author_name = au.full_name
            author_display = f"@{au.username}" if au.username else au.full_name
        elif getattr(original, "forward_sender_name", None):
            # –§–æ—Ä–≤–∞—Ä–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞/—Å–∫—Ä—ã—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            author_display = author_name = original.forward_sender_name
        else:
            # –§–æ–ª–±—ç–∫ ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            author_display = author_name

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.db.add_quote(author_id, author_name, text):
                await update.message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                await original.reply_text(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞ ‚Äî {author_display}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        try:
            quote = self.db.get_random_quote()
            if not quote:
                await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")
                return

            # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ –ë–î –ª–µ–∂–∞—Ç —Ö–æ—Ç—è –±—ã 'user_id' –∏ 'user_name'
            author_id = quote.get('user_id') or quote.get('author_id') or 0
            author_name = quote.get('user_name') or quote.get('author_name') or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

            author_fmt = await self._format_author(
                context=context,
                chat_id=update.effective_chat.id,
                author_id=author_id,
                author_name=author_name
            )

            response = (
                f"üìå –¶–∏—Ç–∞—Ç–∞ #{quote.get('id', '')}:\n\n"
                f"{escape(quote['text'])}\n\n"
                f"‚Äî {author_fmt}"
            )
            await update.message.reply_text(response, parse_mode="HTML", disable_web_page_preview=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã")

    async def ask_deepseek(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        MAX_TIMEOUT = 40
        MAX_RETRIES = 5

        try:
            if not self.is_message_for_bot(update.message.text):
                return

            if not self.deepseek_api_key:
                await update.message.reply_text("üî¥ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            logger.debug(f"üîê –ö–ª—é—á –¥–ª–∏–Ω–æ–π: {len(self.deepseek_api_key)}")

            query = self._extract_query(update.message.text)
            if len(query) < 4:
                await update.message.reply_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)")
                return

            headers = {
                "Authorization": f"Bearer {self.deepseek_api_key}",
                "Content-Type": "application/json",
                "Accept-Encoding": "gzip"
            }

            payload = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": query}],
                "temperature": 0.7,
                "max_tokens": 2000,
                "stream": False
            }

            for attempt in range(MAX_RETRIES):
                try:
                    response = requests.post(
                        self.deepseek_api_url,
                        headers=headers,
                        json=payload,
                        timeout=MAX_TIMEOUT  # –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
                    )

                    if response.status_code == 429:
                        retry_after = int(response.headers.get('Retry-After', 30))
                        await update.message.reply_text(
                            f"üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫...")
                        await asyncio.sleep(retry_after)
                        continue

                    response.raise_for_status()
                    data = response.json()

                    if not data.get('choices'):
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")

                    answer = data['choices'][0].get('message', {}).get('content', '').strip()
                    if not answer:
                        raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

                    await update.message.reply_text(answer[:4000], parse_mode="Markdown")
                    return

                except requests.exceptions.Timeout:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES})")
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(2 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    continue

                except requests.exceptions.RequestException as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                    break

                except ValueError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                    break

                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                    break

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            error_message = "üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
            logger.error(f"DeepSeek API failure: {error_message}")
            await update.message.reply_text(
                "üò¢ –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ."
            )

        except Exception as e:
            logger.error(f"Critical error in ask_deepseek: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def _extract_query(self, text: str) -> str:


        for name in self.bot_names:
            text = re.sub(rf'^\s*{re.escape(name)}\s*[,!?.]*\s*', '', text, flags=re.IGNORECASE)
        return text.strip()

    def _extract_city(self, text: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞:
        - '–ø–æ–≥–æ–¥–∞ –≤–æ–ª–≥–æ–≥—Ä–∞–¥'
        - '–ø–æ–≥–æ–¥–∞ –≤ –≤–æ–ª–≥–æ–≥—Ä–∞–¥–µ'
        - '–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –Ω—å—é-–π–æ—Ä–∫–µ'
        - '–ø–æ–≥–æ–¥–∞ –ø–æ –ø–∏—Ç–µ—Ä—É'
        """
        text = text.strip().lower()

        # –∏—â–µ–º —Å–ª–æ–≤–æ '–ø–æ–≥–æ–¥–∞' –∏ –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ
        m = re.search(r'–ø–æ–≥–æ–¥–∞(?:\s+[–≤–ø–æ])?\s+(.+)', text)
        if not m:
            return None

        city = m.group(1).strip()

        # —É–±–µ—Ä—ë–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        city = re.sub(r'^[,.;:!?¬´¬ª"\']+|[,.;:!?¬´¬ª"\']+$', '', city)

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        city = re.sub(r'\s{2,}', ' ', city)

        if len(city) < 3:
            return None
        return city

    from html import escape

    async def _format_author(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int,
                             author_id: int | None, author_name: str | None) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '@username (–ò–º—è –§–∞–º–∏–ª–∏—è)' —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º.
        –ï—Å–ª–∏ username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä–Ω—ë—Ç –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è.
        –ï—Å–ª–∏ user_id –Ω–µ—Ç, –≤–µ—Ä–Ω—ë—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç author_name.
        """
        name = author_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"

        if not author_id:
            # –Ω–µ—Ç id ‚Äî —Å—Å—ã–ª–∫—É –Ω–µ —Å–¥–µ–ª–∞–µ–º
            return escape(name)

        username = None
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π username –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            member = await context.bot.get_chat_member(chat_id, author_id)
            if member and member.user:
                username = member.user.username
                # –æ–±–Ω–æ–≤–∏–º –∏–º—è, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—É—Å—Ç–æ–µ/—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ
                if member.user.full_name and member.user.full_name != name:
                    name = member.user.full_name
        except Exception:
            # —é–∑–µ—Ä –º–æ–≥ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass

        link = f'<a href="tg://user?id={author_id}">{escape(name)}</a>'
        if username:
            return f"@{escape(username)} ({link})"
        return link

    async def gossip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞ –∑–∞ N —á–∞—Å–æ–≤."""
        try:
            chat_id = update.effective_chat.id
            msgs = self.gossip_db.get_recent(chat_id, hours=self.gossip_window_hours, limit=self.gossip_limit)

            if not msgs or len([m for m in msgs if m.get("text")]) < 5:
                await update.message.reply_text("–ü–æ–∫–∞ –º–∞–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–µ–µ ‚Äî —Ç–æ–≥–¥–∞ –±—É–¥—É—Ç —Å–ø–ª–µ—Ç–Ω–∏ üòâ")
                return

            # —Å–æ–±–µ—Ä—ë–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            def fmt(m):
                name = m.get("user_name") or "–ö—Ç–æ-—Ç–æ"
                txt = m.get("text", "").replace("\n", " ").strip()
                return f"{name}: {txt}"

            sample = "\n".join(fmt(m) for m in msgs[:180])  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

            summary = None
            if self.deepseek_api_key:
                prompt = (
                    "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã. "
                    "–í—ã–¥–µ–ª–∏: 1) –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã, 2) –∫—Ç–æ —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–ª/—Å–¥–µ–ª–∞–ª, 3) –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–µ–¥–ª–∞–π–Ω—ã, "
                    "4) –∑–∞–±–∞–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã (–∫—Ä–∞—Ç–∫–æ). –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Å–ø–∏—Å–∫–æ–º, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. "
                    "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞ ‚Äî –æ—Ç–º–µ—Ç—å —ç—Ç–æ. –í–æ—Ç –ª–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–≤–µ—Ä—Ö—É –Ω–æ–≤—ã–µ):\n\n"
                    f"{sample}"
                )
                headers = {
                    "Authorization": f"Bearer {self.deepseek_api_key}",
                    "Content-Type": "application/json",
                    "Accept-Encoding": "gzip"
                }
                payload = {
                    "model": "deepseek-chat",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.4,
                    "max_tokens": 800,
                    "stream": False
                }
                try:
                    import requests
                    r = requests.post(self.deepseek_api_url, headers=headers, json=payload, timeout=35)
                    r.raise_for_status()
                    data = r.json()
                    summary = (data.get("choices", [{}])[0].get("message", {}) or {}).get("content")
                except Exception as e:
                    logger.warning(f"DeepSeek gossip summary failed: {e}")

            # –§–æ–ª–±—ç–∫ –±–µ–∑ LLM
            if not summary:
                # –ü—Ä–æ—Å—Ç–∞—è –∞–≥—Ä–µ–≥–∏—Ä—É—é—â–∞—è –≤—ã–∂–∏–º–∫–∞ –ø–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è —Å–ª–æ–≤–∞–º/–∏–º–µ–Ω–∞–º
                top_users = {}
                for m in msgs:
                    n = (m.get("user_name") or "–ö—Ç–æ-—Ç–æ").split()[0]
                    top_users[n] = top_users.get(n, 0) + 1
                top = ", ".join([f"{k}√ó{v}" for k, v in sorted(top_users.items(), key=lambda x: -x[1])[:5]])
                summary = (
                    "–ö–æ—Ä–æ—Ç–∫–æ –ø–æ —á–∞—Ç—É:\n"
                    f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(msgs)} –∑–∞ {self.gossip_window_hours}—á\n"
                    f"‚Ä¢ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {top or '‚Äî'}\n"
                    "‚Ä¢ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ DeepSeek (DEEPSEEK_API_KEY).\n"
                )

            header = f"ü´ñ –°–ø–ª–µ—Ç–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {self.gossip_window_hours}—á:"
            await update.message.reply_text(f"{header}\n\n{summary}".strip()[:4000])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ gossip: {e}", exc_info=True)
            await update.message.reply_text("–ù–µ –≤—ã—à–ª–æ —Å–æ–±—Ä–∞—Ç—å —Å–ø–ª–µ—Ç–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    """
    async def forecast(self, update, context, city: Optional[str] = None, cleaned_text: Optional[str] = None):
        try:
            # —Ç–µ–∫—Å—Ç –≤ –¥–≤—É—Ö –≤–∏–¥–∞—Ö: –Ω–∏–∂–Ω–∏–π –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞, –∏—Å—Ö–æ–¥–Ω—ã–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
            raw_full = update.message.text or ""
            # —É–±–µ—Ä—ë–º –æ–±—Ä–∞—â–µ–Ω–∏–µ "–õ–µ–≤/–õ—ë–≤–∞" –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –Ω–æ –ë–ï–ó .lower()
            orig_cleaned = re.sub(
                rf'^\s*({"|".join(map(re.escape, self.bot_names))})[\s,!?.]*\s*',
                '',
                raw_full,
                flags=re.IGNORECASE
            ).strip()

            lower_cleaned = (cleaned_text or orig_cleaned).lower()

            # weekly?
            is_weekly = bool(re.search(r'–ø—Ä–æ–≥–Ω–æ–∑(?:\s+–Ω–∞)?\s+–Ω–µ–¥–µ–ª[—é–∏]', lower_cleaned))

            # –≥–æ—Ä–æ–¥ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –û–†–ò–ì–ò–ù–ê–õ–ê (orig_cleaned), —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä
            if not city:
                if is_weekly:
                    m = re.search(r'–ø—Ä–æ–≥–Ω–æ–∑(?:\s+–Ω–∞)?\s+–Ω–µ–¥–µ–ª[—é–∏](?:\s+(?:–≤|–ø–æ))?\s+(.+)$', orig_cleaned,
                                  flags=re.IGNORECASE)
                else:
                    m = re.search(r'–ø—Ä–æ–≥–Ω–æ–∑(?:\s+(?:–≤|–ø–æ))?\s+(.+)$', orig_cleaned, flags=re.IGNORECASE)
                city = (m.group(1).strip() if m else None)

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: '–õ–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –ú–æ—Å–∫–≤–∞' –∏–ª–∏ '–õ–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –ú–æ—Å–∫–≤–∞'"
                )
                return


        except Exception as e:

            logger.error(f"–û—à–∏–±–∫–∞ –≤ forecast: {e}", exc_info=True)

            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def station_search(self, update, context, cleaned_text: str = None, city: Optional[str] = None):
        try:
            raw_full = update.message.text or ""
            orig_cleaned = re.sub(
                rf'^\s*({"|".join(map(re.escape, self.bot_names))})[\s,!?.]*\s*',
                '',
                raw_full,
                flags=re.IGNORECASE
            ).strip()

            if not city:
                m = re.search(r'—Å—Ç–∞–Ω—Ü(?:–∏—è|–∏–∏)?(?:\s+(?:–≤|–ø–æ))?\s+(.+)$', orig_cleaned, flags=re.IGNORECASE)
                city = (m.group(1).strip() if m else None)

            if not city:
                await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: '–õ–µ–≤ —Å—Ç–∞–Ω—Ü–∏–∏ –ú–æ—Å–∫–≤–∞'")
                return

            stations = self.meteorf.search_stations(city)
            if not stations:
                await update.message.reply_text(f"–ü–æ '{city}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
                return

            lines = [f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è ¬´{city}¬ª: (–¥–æ 10 —à—Ç.)"]
            for s in stations[:10]:
                nm = s.get("locale_name") or s.get("name") or "‚Äî"
                lines.append(f"‚Ä¢ {nm} ‚Äî –∫–æ–¥ {s['code']}")
            lines.append("\n–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å: '–õ–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–¥ <–∫–æ–¥>'")
            await update.message.reply_text("\n".join(lines))

        except Exception as e:
            logger.error(f"station_search error: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏.")

    async def forecast_by_code(self, update, context, cleaned_text: str = None):
        try:
            text = (cleaned_text or update.message.text or "").lower()
            m = re.search(r'–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–¥ (\d{6,})$', text)
            if not m:
                await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: '–õ–µ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–¥ 106747000'")
                return
            code = m.group(1)

            raw = self.meteorf.forecast_weekly(code) if "–Ω–µ–¥–µ–ª" in text else self.meteorf.forecast_daily(code)

            # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –¥–Ω–µ–π
            if isinstance(raw, list):
                days = raw
            elif isinstance(raw, dict):
                for key in ("days", "daily", "items", "list", "forecasts", "data"):
                    if isinstance(raw.get(key), list):
                        days = raw[key];
                        break
                else:
                    days = []
            else:
                days = []

            def pick(d, *keys, default=None):
                for k in keys:
                    if isinstance(d, dict) and d.get(k) is not None:
                        return d[k]
                return default

            def fnum(x):
                try:
                    return f"{float(x):.1f}"
                except:
                    return None

            lines = [f"üóì –ü—Ä–æ–≥–Ω–æ–∑ (–∫–æ–¥ {code}):"]
            shown = 0
            for d in days:
                date = pick(d, "date", "day", "dt", default="")
                tmin = fnum(pick(d, "t_min", "tMinC", "temp_min", "tmin"))
                tmax = fnum(pick(d, "t_max", "tMaxC", "temp_max", "tmax"))
                descr = pick(d, "descr", "text", "condition", "weather", default="")
                parts = [str(date)]
                if tmin or tmax:
                    if tmin and tmax:
                        parts.append(f"{tmin}‚Ä¶{tmax}¬∞C")
                    elif tmax:
                        parts.append(f"–¥–æ {tmax}¬∞C")
                    elif tmin:
                        parts.append(f"–æ—Ç {tmin}¬∞C")
                if descr: parts.append(descr)
                line = " ‚Äî ".join(p for p in parts if p)
                if line: lines.append(line); shown += 1
                if shown >= 7: break

            if shown == 0:
                lines.append("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç API. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥/–≥–æ—Ä–æ–¥.")
            await update.message.reply_text("\n".join(lines))
        except Exception as e:
            logger.error(f"forecast_by_code error: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫–æ–¥—É.")
"""

    def _dialog_enabled(self, chat_id: int) -> bool:
        return bool(self.dialog_on.get(chat_id))

    def _dialog_reset(self, chat_id: int):
        self.dialog_history[chat_id] = []

    def _dialog_push(self, chat_id: int, role: str, content: str):
        if not content:
            return
        hist = self.dialog_history.setdefault(chat_id, [])
        # –ø–æ–¥—Ä–µ–∂–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        content = content.strip()
        if len(content) > self.DIALOG_MAX_CHARS:
            content = content[:self.DIALOG_MAX_CHARS] + " ‚Ä¶"
        hist.append({"role": role, "content": content})
        # –æ–≥—Ä–∞–Ω–∏—á–∏–º –æ–∫–Ω–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–ø–ª–∏–∫–∞–º
        if len(hist) > self.DIALOG_MAX_TURNS * 2 + 2:
            self.dialog_history[chat_id] = hist[-(self.DIALOG_MAX_TURNS * 2 + 2):]

    def _dialog_build_messages(self, chat_id: int) -> list[dict]:
        msgs = [{"role": "system", "content": self.dialog_system}]
        msgs.extend(self.dialog_history.get(chat_id, []))
        return msgs

    async def dialog_enable(self, update, context):
        chat_id = update.effective_chat.id
        self.dialog_on[chat_id] = True
        # –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ ‚Äú–¥–æ–≥–Ω–∞—Ç—å‚Äù –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
        # self._dialog_reset(chat_id)
        await update.message.reply_text("üü¢ –î–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤–∫–ª—é—á—ë–Ω. –ü–∏—à–∏: ¬´–õ–µ–≤ ‚Ä¶¬ª –∏ —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –±–µ—Å–µ–¥—É.")

    async def dialog_disable(self, update, context):
        chat_id = update.effective_chat.id
        self.dialog_on[chat_id] = False
        await update.message.reply_text("‚õî –î–∏–∞–ª–æ–≥ –≤—ã–∫–ª—é—á–µ–Ω. –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ.")

    async def dialog_reset_cmd(self, update, context):
        chat_id = update.effective_chat.id
        self._dialog_reset(chat_id)
        await update.message.reply_text("‚ôªÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

    async def dialog_status(self, update, context):
        chat_id = update.effective_chat.id
        on = "–≤–∫–ª—é—á—ë–Ω" if self._dialog_enabled(chat_id) else "–≤—ã–∫–ª—é—á–µ–Ω"
        turns = len(self.dialog_history.get(chat_id, []))
        await update.message.reply_text(f"‚ÑπÔ∏è –î–∏–∞–ª–æ–≥ {on}. –í –∏—Å—Ç–æ—Ä–∏–∏ {turns} —Ä–µ–ø–ª–∏–∫.")

    async def dialog_answer(self, update, context, cleaned_text: str):
        """–û—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ DeepSeek —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏."""
        chat_id = update.effective_chat.id
        user_text = cleaned_text.strip()

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —é–∑–µ—Ä–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        self._dialog_push(chat_id, "user", user_text)
        msgs = self._dialog_build_messages(chat_id)
        reply = self._deepseek_chat(msgs)
        self._dialog_push(chat_id, "assistant", reply)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await update.message.reply_text(reply)

    def _deepseek_chat(self, messages: list[dict], temperature: float = 0.4, max_tokens: int = 800) -> str:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ DeepSeek ChatCompletion.
        messages: [{"role":"system|user|assistant", "content":"..."}]
        """
        if not self.deepseek_api_key:
            return "DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –∑–∞–¥–∞–Ω –∫–ª—é—á (DEEPSEEK_API_KEY)."

        headers = {
            "Authorization": f"Bearer {self.deepseek_api_key}",
            "Content-Type": "application/json",
            "Accept-Encoding": "gzip",
        }
        payload = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "stream": False,
        }
        try:
            import requests
            r = requests.post(self.deepseek_api_url, headers=headers, json=payload, timeout=35)
            r.raise_for_status()
            data = r.json()
            msg = (data.get("choices", [{}])[0].get("message", {}) or {}).get("content")
            return msg or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        except Exception as e:
            logger.error(f"DeepSeek chat error: {e}", exc_info=True)
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek."
