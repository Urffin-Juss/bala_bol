from telegram import Update
from telegram.ext import ContextTypes
import logging
from dotenv import load_dotenv
import os
import requests
import random
from datetime import datetime, timedelta
import re
from pathlib import Path
from models import QuoteDB, Feedback
from typing import Optional, Dict, Any
import asyncio



load_dotenv()
logger = logging.getLogger(__name__)


class Handlers:
    def __init__(self, db: QuoteDB, feedback: Feedback):

        self.deepseek_api_key = os.getenv("DEEPSEEK_API_KEY")
        self.deepseek_api_url = "https://api.deepseek.com/v1/chat/completions"
        self.bot_names = ["–±–æ—Ç", "–ª–µ–≤"]
        self.db = db
        self.feedback = feedback
        self.wisdom_quotes = []

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –º—É–¥—Ä–æ—Å—Ç–∏
        self._load_wisdom_quotes()

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥
        self.command_patterns = {
            # –®—É—Ç–∫–∏ (—Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É—é—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
            r'—à—É—Ç–∫[–∞—É–∏]|–∞–Ω–µ–∫–¥–æ—Ç|–ø–æ—à—É—Ç–∏|—Ä–∞—Å—Å–º–µ—à–∏|–ø—Ä–∏–∫–æ–ª$': self.joke,
            r'—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É|–¥–∞–π —à—É—Ç–∫—É|—Ö–æ—á—É —à—É—Ç–∫—É|–≥–æ —à—É—Ç–∫—É$': self.joke,

            # –ü–æ–≥–æ–¥–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
            r'(?:–∫–∞–∫–∞—è\s+)?–ø–æ–≥–æ–¥[–∞-—è]*.*$': self.weather,
            r'–ø–æ–≥–æ–¥–∞(?: –≤| –ø–æ)? [–∞-—è—ë]{3,}$': self.weather,

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            r'–∫–æ–º–∞–Ω–¥—ã|—á—Ç–æ —É–º–µ–µ—à—å|–ø–æ–º–æ—â—å|help|—Å–ø—Ä–∞–≤–∫–∞$': self.info,

            # –ó–≤–∞–Ω–∏—è/—Ç–∏—Ç—É–ª—ã
            r'–∑–≤–∞–Ω–∏—è|—Ä–æ–∑—ã–≥—Ä—ã—à|—Ç–∏—Ç—É–ª—ã|—Ä–∞–Ω–≥–∏$': self.assign_titles,

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
            r'—Å—Ç–∞—Ä—Ç$|–Ω–∞—á–∞—Ç—å$|–ø—Ä–∏–≤–µ—Ç$|hello$|hi$|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π$': self.start_handler,

            # –¶–∏—Ç–∞—Ç—ã
            r'—Ü—Ç—Ç$|—Ü–∏—Ç–∞—Ç[–∞—É—ã]$|–∑–∞–ø–æ–º–Ω–∏$': self.handle_quote_command,

            # –ú—É–¥—Ä–æ—Å—Ç—å
            r'–º—É–¥—Ä–æ—Å—Ç[—å–∏]$|—Å–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å$|–¥–∞–π –º—É–¥—Ä–æ—Å—Ç—å$|—Å–æ–≤–µ—Ç$': self.wisdom,

            # DeepSeek
            r'–æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å (.+)$': self.ask_deepseek,
            r'(?:–æ—Ç–≤–µ—Ç—å|–æ–±—ä—è—Å–Ω–∏|—Å–∫–∞–∂–∏|—á—Ç–æ –¥—É–º–∞–µ—à—å) (.+)$': self.ask_deepseek,

            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            r'–æ–±—Ä–∞—Ç–Ω[–∞—É—é]|—Ñ–∏–¥–±–µ–∫|–æ—Ç–∑—ã–≤|—Å–æ–æ–±—â–∏ –æ–± –æ—à–∏–±–∫–µ|–±–∞–≥—Ä–µ–ø–æ—Ä—Ç$': self._handle_feedback,
            r'–ø—Ä–µ–¥–ª–æ–∂[–∏—å]|–∏–¥–µ[—è—é]$': self._handle_feedback
        }

    def _load_wisdom_quotes(self):

        try:
            current_dir = Path(__file__).parent
            quotes_file = current_dir / "data" / "wisdom_quotes.txt"
            with open(quotes_file, "r", encoding="utf-8") as f:
                for line in f:
                    if "|" in line:
                        text, author = line.strip().split("|", 1)
                        self.wisdom_quotes.append({
                            "text": text,
                            "author": author
                        })
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.wisdom_quotes)} —Ü–∏—Ç–∞—Ç –º—É–¥—Ä–æ—Å—Ç–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
            self.wisdom_quotes = []

    async def _handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        await self.feedback.handle_feedback(update, context)

    def is_message_for_bot(self, text: str) -> bool:

        text_lower = text.lower()
        return any(name in text_lower for name in self.bot_names)

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            if not update.message or not update.message.text:
                return

            text = update.message.text.lower()

            is_direct_address = any(
                re.match(rf'^{re.escape(name)}[\s,!?.]+', text)  # —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for name in self.bot_names
            )


            if not is_direct_address:
                return


            cleaned_text = re.sub(
                rf'^({"|".join(map(re.escape, self.bot_names))})[\s,!?.]*\s*',
                    '',
                text
            )

            if re.match(r'^(?:–∫–∞–∫–∞—è\s+)?–ø–æ–≥–æ–¥[–∞-—è]*\b', cleaned_text):
                # –ø–µ—Ä–µ–¥–∞—ë–º –û–ß–ò–©–ï–ù–ù–´–ô —Ç–µ–∫—Å—Ç
                await self.weather(update, context, cleaned_text=cleaned_text)
                return

            for pattern, handler in self.command_patterns.items():
                if re.fullmatch(pattern, cleaned_text.strip()):
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {pattern}")
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≥–æ–¥–∞ ‚Äî –ø—Ä–æ–±—Ä–æ—Å–∏–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    if handler is self.weather:
                        await handler(update, context, cleaned_text=cleaned_text)
                    else:
                        await handler(update, context)
                    return


            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")



    async def wisdom(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            if not self.wisdom_quotes:
                await update.message.reply_text("–ë–∞–∑–∞ –º—É–¥—Ä–æ—Å—Ç–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞ üò¢")
                return

            quote = random.choice(self.wisdom_quotes)
            response = f"¬´{quote['text']}¬ª\n\n‚Äî {quote['author']}"
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ wisdom: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–¥—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –õ—ë–≤–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                "- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã\n"
                "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ\n"
                "- –†–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –∑–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ\n"
                "- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã\n"
                "- –î–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
                "- –î–∞—Ç—å —Å—Å—ã–ª–æ—á–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE, city: Optional[str] = None):

        try:

            if city is None:
                user_text = update.message.text.lower()
                match = re.search(r'–ø–æ–≥–æ–¥[–∞-—è]*\s*(?:–≤|–ø–æ)?\s*([\w\- –∞-—è—ë]{3,})$', user_text)
                city = match.group(1).strip() if match else None

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ–µ–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?' –∏–ª–∏ '–õ–µ–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ü–∏—Ç–µ—Ä–µ'")
                return


            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ weather: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def wisdom(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            if not self.wisdom_quotes:
                await update.message.reply_text("–ë–∞–∑–∞ –º—É–¥—Ä–æ—Å—Ç–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞ üò¢")
                return

            quote = random.choice(self.wisdom_quotes)
            response = f"¬´{quote['text']}¬ª\n\n‚Äî {quote['author']}"
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ wisdom: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–¥—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –õ—ë–≤–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                "- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã\n"
                "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ\n"
                "- –†–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –∑–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ\n"
                "- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã\n"
                "- –î–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
                "- –¢–∞–∫ –∂–µ —è –º–æ–≥—É –¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")

    async def weather(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            city: Optional[str] = None,
            cleaned_text: Optional[str] = None
    ):
        try:
            # 1) –≥–æ—Ä–æ–¥
            if not city:
                city = self._extract_city(cleaned_text or "")

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ—ë–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ö–∞–∑–∞–Ω–∏?' –∏–ª–∏ '–õ—ë–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ'"
                )
                return

            if not city:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ–µ–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?' –∏–ª–∏ '–õ–µ–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ü–∏—Ç–µ—Ä–µ'")
                return

            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)


        except Exception as e:

            logger.error(f"–û—à–∏–±–∫–∞ –≤ weather: {e}", exc_info=True)

            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


    async def joke(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            url = "http://rzhunemogu.ru/RandJSON.aspx?CType=1"
            response = requests.get(url, timeout=5)

            if response.status_code != 200:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return

            joke_text = response.text.replace('{"content":"', '').replace('"}', '')
            await update.message.reply_text(joke_text)
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —à—É—Ç–∫–µ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            commands = [
                "–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:",
                "- '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'",
                "- '–õ—ë–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ'",
                "- '–õ—ë–≤–∞, —Ä–∞–∑—ã–≥—Ä–∞–π –∑–≤–∞–Ω–∏—è'",
                "- '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'",
                "- '–õ—ë–≤–∞, —Å–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å'",
                "- '–õ–µ–≤–∞, –≤—Å–ø–æ–º–Ω–∏ —Ü–∏—Ç–∞—Ç—É'"
                "- '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
                "- '–õ—ë–≤–∞, —Å–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å'"
                "- '–õ–µ–≤–∞, –≤—Å–ø–æ–º–Ω–∏ —Ü–∏—Ç–∞—Ç—É'"
            ]
            await update.message.reply_text("\n".join(commands))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ info: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def assign_titles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            chat_id = update.message.chat.id
            last_called = context.chat_data.get('last_called')

            if last_called and datetime.now() - last_called < timedelta(hours=24):
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –∫–æ—Ç–∏–∫")
                return

            admins = await context.bot.get_chat_administrators(chat_id)
            human_members = [admin.user for admin in admins if not admin.user.is_bot]

            if len(human_members) < 2:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
                return

            chosen_members = random.sample(human_members, 2)
            title_x = chosen_members[0]
            title_y = chosen_members[1]

            result_message = (
                f"üéâ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–≤–∞–Ω–∏—è:\n"
                f"üèÜ –ö–∏—Å–æ —á–∞—Ç–∞: {title_x.mention_html()}\n"
                f"ü•á –•–£–ô —á–∞—Ç–∞: {title_y.mention_html()}"
            )

            sent_message = await update.message.reply_text(result_message, parse_mode="HTML")
            await context.bot.pin_chat_message(chat_id, sent_message.message_id)
            context.chat_data["last_called"] = datetime.now()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ assign_titles: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not update.message or not update.message.text:
            return

        user_text = update.message.text.lower()
        greetings = ["–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòÉ", "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª! üëç", "–ô–æ—É! –ß—ë –∫–∞–∫? üòé"]
        farewells = ["–ü–æ–∫–∞-–ø–æ–∫–∞! üñêÔ∏è", "–£–∂–µ —É—Ö–æ–¥–∏—à—å? –ù—É –ª–∞–¥–Ω–æ... üò¢", "–î–æ —Å–∫–æ—Ä–æ–≥–æ! ü•∫"]

        if any(word in user_text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π"]):
            await update.message.reply_text(random.choice(greetings))
        elif any(word in user_text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ø—Ä–æ—â–∞–π"]):
            await update.message.reply_text(random.choice(farewells))
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in user_text:
            await update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—ë–≤–∞ –õ–∏–º–æ–Ω–∞–¥–æ–≤! üéâ")
        else:
            neutral_answers = [
                "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –ø–æ–Ω—è–ª... ü§î",
                "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å? üßê",
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
            ]
            await update.message.reply_text(random.choice(neutral_answers))

    async def add_quote_from_reply(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        if not update.message.reply_to_message:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        original = update.message.reply_to_message
        user = update.message.from_user

        if not original.text:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        text = original.text.strip()

        if len(text) > 500:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        if len(text) < 5:
            await update.message.reply_text("‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
            return

        try:
            if self.db.add_quote(user.id, user.full_name, text):
                username = f"@{user.username}" if user.username else user.full_name
                await update.message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                await original.reply_text(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç {username}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        try:
            quote = self.db.get_random_quote()
            if quote and 'text' in quote and 'user_name' in quote:
                response = f"üìå –¶–∏—Ç–∞—Ç–∞ #{quote.get('id', '')}:\n\n{quote['text']}\n\n‚Äî {quote['user_name']}"
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã")

    async def ask_deepseek(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        MAX_TIMEOUT = 40
        MAX_RETRIES = 5

        try:
            if not self.is_message_for_bot(update.message.text):
                return

            if not self.deepseek_api_key:
                await update.message.reply_text("üî¥ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            logger.debug(f"üîê –ö–ª—é—á –¥–ª–∏–Ω–æ–π: {len(self.deepseek_api_key)}")

            query = self._extract_query(update.message.text)
            if len(query) < 4:
                await update.message.reply_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)")
                return

            headers = {
                "Authorization": f"Bearer {self.deepseek_api_key}",
                "Content-Type": "application/json",
                "Accept-Encoding": "gzip"
            }

            payload = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": query}],
                "temperature": 0.7,
                "max_tokens": 2000,
                "stream": False
            }

            for attempt in range(MAX_RETRIES):
                try:
                    response = requests.post(
                        self.deepseek_api_url,
                        headers=headers,
                        json=payload,
                        timeout=MAX_TIMEOUT  # –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
                    )

                    if response.status_code == 429:
                        retry_after = int(response.headers.get('Retry-After', 30))
                        await update.message.reply_text(
                            f"üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫...")
                        await asyncio.sleep(retry_after)
                        continue

                    response.raise_for_status()
                    data = response.json()

                    if not data.get('choices'):
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")

                    answer = data['choices'][0].get('message', {}).get('content', '').strip()
                    if not answer:
                        raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

                    await update.message.reply_text(answer[:4000], parse_mode="Markdown")
                    return

                except requests.exceptions.Timeout:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES})")
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(2 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    continue

                except requests.exceptions.RequestException as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                    break

                except ValueError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                    break

                except Exception as e:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                    break

            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            error_message = "üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
            logger.error(f"DeepSeek API failure: {error_message}")
            await update.message.reply_text(
                "üò¢ –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ."
            )

        except Exception as e:
            logger.error(f"Critical error in ask_deepseek: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def _extract_query(self, text: str) -> str:


        for name in self.bot_names:
            text = re.sub(rf'^\s*{re.escape(name)}\s*[,!?.]*\s*', '', text, flags=re.IGNORECASE)
        return text.strip()

    def _extract_city(self, text: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞:
        - '–ø–æ–≥–æ–¥–∞ –≤–æ–ª–≥–æ–≥—Ä–∞–¥'
        - '–ø–æ–≥–æ–¥–∞ –≤ –≤–æ–ª–≥–æ–≥—Ä–∞–¥–µ'
        - '–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –Ω—å—é-–π–æ—Ä–∫–µ'
        - '–ø–æ–≥–æ–¥–∞ –ø–æ –ø–∏—Ç–µ—Ä—É'
        """
        text = text.strip().lower()

        # –∏—â–µ–º —Å–ª–æ–≤–æ '–ø–æ–≥–æ–¥–∞' –∏ –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ
        m = re.search(r'–ø–æ–≥–æ–¥–∞(?:\s+[–≤–ø–æ])?\s+(.+)', text)
        if not m:
            return None

        city = m.group(1).strip()

        # —É–±–µ—Ä—ë–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        city = re.sub(r'^[,.;:!?¬´¬ª"\']+|[,.;:!?¬´¬ª"\']+$', '', city)

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        city = re.sub(r'\s{2,}', ' ', city)

        if len(city) < 3:
            return None
        return city

    # –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ–±–∞–≥—Ö–∞–Ω—Ç–µ—Ä

    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        self.db.debug_quotes()

        quote = self.db.get_random_quote()
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞: {quote}")

        if quote:
            await update.message.reply_text(f"–¶–∏—Ç–∞—Ç–∞ #{quote['id']}:\n{quote['text']}")
        else:
            await update.message.reply_text("–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")        