from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import logging
from dotenv import load_dotenv
import os
import requests
import random
from datetime import datetime, timedelta
import re
from pathlib import Path
from openai import OpenAI

load_dotenv()
logger = logging.getLogger(__name__)


class Handlers:
    def __init__(self, db=None):
        self.deepseek_api_key = os.getenv("DEEPSEEK_API_KEY")
        self.deepseek_api_url = "https://api.deepseek.com/v1/chat/completions"
        self.bot_names = ["–±–æ—Ç", "–ª—ë–≤–∞", "–ª–∏–º–æ–Ω–∞–¥–Ω—ã–π", "–¥—Ä—É–∂–∏—â–µ", "–ª–µ–≤–∞", "–ª–µ–≤"]
        self.db = db
        self.wisdom_quotes = []

        try:
            current_dir = Path(__file__).parent
            quotes_file = current_dir / "data" / "wisdom_quotes.txt"
            with open(quotes_file, "r", encoding="utf-8") as f:
                for line in f:
                    if "|" in line:
                        text, author = line.strip().split("|", 1)
                        self.wisdom_quotes.append({
                            "text": text,
                            "author": author
                        })
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.wisdom_quotes)} —Ü–∏—Ç–∞—Ç –º—É–¥—Ä–æ—Å—Ç–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
            self.wisdom_quotes = []

        self.command_patterns = {
            # –®—É—Ç–∫–∏
            r'(^|\s)(—à—É—Ç–∫[–∞—É–∏]|–∞–Ω–µ–∫–¥–æ—Ç|–ø–æ—à—É—Ç–∏|—Ä–∞—Å—Å–º–µ—à–∏|–ø—Ä–∏–∫–æ–ª)': self.joke,
            r'(^|\s)(—Ä–∞—Å—Å–∫–∞–∂–∏|–¥–∞–π|—Ö–æ—á—É|–≥–æ)\s*(—à—É—Ç–∫—É|–∞–Ω–µ–∫–¥–æ—Ç|–ø—Ä–∏–∫–æ–ª)': self.joke,
    
            # –ü–æ–≥–æ–¥–∞
            r'(^|\s)(–∫–∞–∫–∞—è|—É–∑–Ω–∞—Ç—å|—Å–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏)\s*(–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É)\s*(–≤|–ø–æ)?\s*([–∞-—è—ë]{3,})': self.weather,
            r'(^|\s)(–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É)\s*(–≤|–ø–æ)?\s*([–∞-—è—ë]{3,})': self.weather,
    
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            r'(^|\s)(–∫–æ–º–∞–Ω–¥—ã|—á—Ç–æ\s+—É–º–µ–µ—à—å|–ø–æ–º–æ—â—å|help|—Å–ø—Ä–∞–≤–∫–∞)': self.info,
    
            # –ó–≤–∞–Ω–∏—è/—Ç–∏—Ç—É–ª—ã
            r'(^|\s)(–∑–≤–∞–Ω–∏—è|—Ä–æ–∑—ã–≥—Ä—ã—à|—Ç–∏—Ç—É–ª—ã|—Ä–∞–Ω–≥–∏)': self.assign_titles,
    
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            r'(^|\s)(—Å—Ç–∞—Ä—Ç|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏–≤–µ—Ç|hello|hi|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π)': self.start_handler,
    
            # –¶–∏—Ç–∞—Ç—ã
            r'(^|\s)(—Ü—Ç—Ç|—Ü–∏—Ç–∞—Ç[–∞—É—ã]|–∑–∞–ø–æ–º–Ω–∏)': self.handle_quote_command,
    
            # –ú—É–¥—Ä–æ—Å—Ç—å
            r'(^|\s)(–º—É–¥—Ä–æ—Å—Ç[—å–∏]|—Å–∫–∞–∂–∏\s+–º—É–¥—Ä–æ—Å—Ç—å|–¥–∞–π\s+–º—É–¥—Ä–æ—Å—Ç—å|—Å–æ–≤–µ—Ç)': self.wisdom,
    
            # DeepSeek
            r'(^|\s)(–æ—Ç–≤–µ—Ç—å|—Å–ø—Ä–æ—Å–∏|deepseek|ask|—Å–∫–∞–∂–∏|—á—Ç–æ\s+–¥—É–º–∞–µ—à—å)': self.ask_deepseek,
            r'(^|\s)(–æ—Ç–≤–µ—Ç—å\s+–Ω–∞\s+–≤–æ–ø—Ä–æ—Å|–æ–±—ä—è—Å–Ω–∏|—Ä–∞—Å—Å–∫–∞–∂–∏\s+–ø–æ–¥—Ä–æ–±–Ω–µ–µ)': self.ask_deepseek,
    
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–Ω–æ–≤–æ–µ)
            r'(^|\s)(–æ–±—Ä–∞—Ç–Ω[–∞—É—é]|—Ñ–∏–¥–±–µ–∫|–æ—Ç–∑—ã–≤|—Å–æ–æ–±—â–∏\s+–æ–±\s+–æ—à–∏–±–∫–µ|–±–∞–≥—Ä–µ–ø–æ—Ä—Ç)': self.handle_feedback,
            r'(^|\s)(–ø—Ä–µ–¥–ª–æ–∂[–∏—å]|–∏–¥–µ[—è—é])': self.handle_feedback
    }
        

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text.lower()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            direct_address = any(name in text for name in self.bot_names)
            
            for pattern, handler in self.command_patterns.items():
                match = re.search(pattern, text)
                if match:
                    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–æ –µ–≥–æ –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if pattern in [r'–æ—Ç–≤–µ—Ç—å', r'–æ–±—ä—è—Å–Ω–∏'] and not direct_address:
                        continue
                        
                    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
                    await handler(update, context, *match.groups())
                    return

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            if direct_address:
                await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
            else:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                pass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    

    

    async def wisdom(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            if not self.wisdom_quotes:
                await update.message.reply_text("–ë–∞–∑–∞ –º—É–¥—Ä–æ—Å—Ç–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞ üò¢")
                return

            quote = random.choice(self.wisdom_quotes)
            response = f"¬´{quote['text']}¬ª\n\n‚Äî {quote['author']}"
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ wisdom: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–¥—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if update.message.reply_to_message and update.message.text.lower().strip() == "—Ü—Ç—Ç":
            await self._add_quote_from_reply(update, context)
            return

        user_text = update.message.text.lower() if update.message.text else ""

        if not self.is_message_for_bot(user_text):
            return

        cleaned_text = re.sub(r'^\s*(–±–æ—Ç|–ª—ë–≤–∞|–ª–µ–≤–∞|–¥—Ä—É–∂–∏—â–µ)[,\.!]*\s*', '', user_text)

        for pattern, handler in self.command_patterns.items():
            if re.search(pattern, cleaned_text):
                await handler(update, context)
                return

        await self.handle_text(update, context)

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –õ—ë–≤–∞. –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è:\n"
                f"- –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É\n"
                f"- –°–æ–æ–±—â–∏—Ç—å –ø–æ–≥–æ–¥—É\n"
                f"- –†–∞–∑—ã–≥—Ä–∞—Ç—å –∑–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ\n"
                f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'"
            )
        except Exception as e:
            logger.error(f"Start error: {e}")
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            user_text = update.message.text.lower()
            match = re.search(r'–ø–æ–≥–æ–¥[–∞-—è]*\s*(?:–≤|–ø–æ)?\s*([–∞-—è—ë]+)', user_text)
            city = match.group(1) if match else None

            if not city:
                await update.message.reply_text(
                    "–ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ–µ–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?' –∏–ª–∏ '–õ–µ–≤–∞, –ø–æ–≥–æ–¥–∞ –≤ –ü–∏—Ç–µ—Ä–µ'")
                return

            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–≥–æ–¥–µ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def joke(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            url = "http://rzhunemogu.ru/RandJSON.aspx?CType=1"
            response = requests.get(url, timeout=5)

            if response.status_code != 200:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return

            joke_text = response.text.replace('{"content":"', '').replace('"}', '')
            await update.message.reply_text(joke_text)
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —à—É—Ç–∫–µ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            commands = [
                "–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:",
                "- '–õ—ë–≤–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'",
                "- '–õ—ë–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ'",
                "- '–õ—ë–≤–∞, —Ä–∞–∑—ã–≥—Ä–∞–π –∑–≤–∞–Ω–∏—è'",
                "- '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'",
                "- '–õ—ë–≤–∞, —Å–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å'",
                "- '–õ–µ–≤–∞, –≤—Å–ø–æ–º–Ω–∏ —Ü–∏—Ç–∞—Ç—É'"
                "- '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
                "- '–õ—ë–≤–∞, —Å–∫–∞–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å'"
                "- '–õ–µ–≤–∞, –≤—Å–ø–æ–º–Ω–∏ —Ü–∏—Ç–∞—Ç—É'"
            ]
            await update.message.reply_text("\n".join(commands))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ info: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def assign_titles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        try:
            chat_id = update.message.chat.id
            last_called = context.chat_data.get('last_called')

            if last_called and datetime.now() - last_called < timedelta(hours=24):
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –∫–æ—Ç–∏–∫")
                return

            admins = await context.bot.get_chat_administrators(chat_id)
            human_members = [admin.user for admin in admins if not admin.user.is_bot]

            if len(human_members) < 2:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
                return

            chosen_members = random.sample(human_members, 2)
            title_x = chosen_members[0]
            title_y = chosen_members[1]

            result_message = (
                f"üéâ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–≤–∞–Ω–∏—è:\n"
                f"üèÜ –ö–∏—Å–æ —á–∞—Ç–∞: {title_x.mention_html()}\n"
                f"ü•á –•–£–ô —á–∞—Ç–∞: {title_y.mention_html()}"
            )

            sent_message = await update.message.reply_text(result_message, parse_mode="HTML")
            await context.bot.pin_chat_message(chat_id, sent_message.message_id)
            context.chat_data["last_called"] = datetime.now()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ assign_titles: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not update.message or not update.message.text:
            return

        user_text = update.message.text.lower()
        greetings = ["–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòÉ", "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª! üëç", "–ô–æ—É! –ß—ë –∫–∞–∫? üòé"]
        farewells = ["–ü–æ–∫–∞-–ø–æ–∫–∞! üñêÔ∏è", "–£–∂–µ —É—Ö–æ–¥–∏—à—å? –ù—É –ª–∞–¥–Ω–æ... üò¢", "–î–æ —Å–∫–æ—Ä–æ–≥–æ! ü•∫"]

        if any(word in user_text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π"]):
            await update.message.reply_text(random.choice(greetings))
        elif any(word in user_text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ø—Ä–æ—â–∞–π"]):
            await update.message.reply_text(random.choice(farewells))
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in user_text:
            await update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—ë–≤–∞ –õ–∏–º–æ–Ω–∞–¥–æ–≤! üéâ")
        else:
            neutral_answers = [
                "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –ø–æ–Ω—è–ª... ü§î",
                "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å? üßê",
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
            ]
            await update.message.reply_text(random.choice(neutral_answers))

    async def add_quote_from_reply(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        if not update.message.reply_to_message:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        original = update.message.reply_to_message
        user = update.message.from_user

        if not original.text:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        text = original.text.strip()

        if len(text) > 500:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        if len(text) < 5:
            await update.message.reply_text("‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
            return

        try:
            if self.db.add_quote(user.id, user.full_name, text):
                username = f"@{user.username}" if user.username else user.full_name
                await update.message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                await original.reply_text(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç {username}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not self.db:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        try:
            quote = self.db.get_random_quote()
            if quote and 'text' in quote and 'user_name' in quote:
                response = f"üìå –¶–∏—Ç–∞—Ç–∞ #{quote.get('id', '')}:\n\n{quote['text']}\n\n‚Äî {quote['user_name']}"
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã")
            
            
    async def ask_deepseek(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek"""
        try:
            user_text = update.message.text
            
            headers = {
                "Authorization": f"Bearer {self.deepseek_api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": user_text}],
                "temperature": 0.7,
                "max_tokens": 1000
            }
            
            response = requests.post(
                self.deepseek_api_url,
                headers=headers,
                json=payload
            ).json()
            
            answer = response["choices"][0]["message"]["content"]
            await update.message.reply_text(answer)
            
        except Exception as e:
            logger.error(f"DeepSeek API error: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            
            
            
            


    # –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ–±–∞–≥—Ö–∞–Ω—Ç–µ—Ä

    async def handle_quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        self.db.debug_quotes()

        quote = self.db.get_random_quote()
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞: {quote}")

        if quote:
            await update.message.reply_text(f"–¶–∏—Ç–∞—Ç–∞ #{quote['id']}:\n{quote['text']}")
        else:
            await update.message.reply_text("–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")        