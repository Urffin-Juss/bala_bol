from telegram import Update
from telegram.ext import ContextTypes 
import logging
from dotenv import load_dotenv
import os
import requests
import random
from datetime import datetime, timedelta
import re

load_dotenv()
logger = logging.getLogger(__name__)

class Handlers:
    def __init__(self):
        self.bot_names = ["–±–æ—Ç", "–ª—ë–≤–∞", "–ª–∏–º–æ–Ω–∞–¥–Ω—ã–π", "–¥—Ä—É–∂–∏—â–µ", "–ª–µ–≤–∞", "–ª–µ–≤"]
        self.bot_mention_pattern = re.compile(
            r'\b(–±–æ—Ç|–ª—ë–≤–∞|–ª–∏–º–æ–Ω–∞–¥–Ω—ã–π|–¥—Ä—É–∂–∏—â–µ|–ª–µ–≤–∞|–ª–µ–≤)[,\.!]*\b',
            re.IGNORECASE
        )
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        self.command_keywords = {
            "–ø–æ–≥–æ–¥–∞": "weather",
            "—à—É—Ç–∫–∞": "joke",
            "–∫–æ–º–∞–Ω–¥—ã": "info",
            "–∑–≤–∞–Ω–∏—è": "assign_titles",
            "—Å—Ç–∞—Ä—Ç": "start"
        }

    def is_message_for_bot(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –±–æ—Ç—É"""
        if not text:
            return False
            
        if self.bot_mention_pattern.search(text):
            return True
            
        first_word = text.split()[0].lower()
        if first_word in self.bot_names:
            return True
            
        return False

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        
        if not self.is_message_for_bot(user_text):
            return
            
        cleaned_text = self.bot_mention_pattern.sub('', user_text).strip()
        cleaned_text = cleaned_text.lower()

        for keyword, method_name in self.command_keywords.items():
            if keyword in cleaned_text:
                method = getattr(self, method_name)
                await method(update, context)
                return
                
        await self.handle_text(update, context, cleaned_text)

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–≥–æ–¥—ã"""
        try:
            user_text = update.message.text.lower()
            city = None
            
            if "–ø–æ–≥–æ–¥–∞" in user_text:
                parts = user_text.split("–ø–æ–≥–æ–¥–∞")[1].strip().split()
                if parts:
                    city = parts[0]
            
            if not city:
                await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–õ—ë–≤–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?'")
                return

            api_key = os.getenv('OPENWEATHER_API_KEY')
            if not api_key:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
                return

            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
            response = requests.get(url)
            data = response.json()

            if data.get("cod") != 200:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            weather_description = data['weather'][0]['description']
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
            await update.message.reply_text(weather_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ weather: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def joke(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —à—É—Ç–∫–∏"""
        try:
            url = "http://rzhunemogu.ru/RandJSON.aspx?CType=1"  
            response = requests.get(url, timeout=5)
            
            if response.status_code != 200:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
        
            joke_text = response.text.replace('{"content":"', '').replace('"}', '')
            await update.message.reply_text(joke_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ joke: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    async def info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            commands = [
                "–±–æ—Ç/–ª—ë–≤–∞ + [–∫–æ–º–∞–Ω–¥–∞] - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É",
                "–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥] - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É",
                "—à—É—Ç–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É",
                "–∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "–∑–≤–∞–Ω–∏—è - —Ä–æ–∑—ã–≥—Ä—ã—à –∑–≤–∞–Ω–∏–π (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)"
            ]
            await update.message.reply_text("–ö–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è:\n" + "\n".join(commands))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ info: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def assign_titles(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∑–≤–∞–Ω–∏–π"""
        try:
            chat_id = update.message.chat.id
            last_called = context.chat_data.get('last_called')
            
            if last_called and datetime.now() - last_called < timedelta(hours=24):
                await update.message.reply_text("–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –∫–æ—Ç–∏–∫")
                return
            
            admins = await context.bot.get_chat_administrators(chat_id)
            human_members = [admin.user for admin in admins if not admin.user.is_bot]

            if len(human_members) < 2:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
                return
            
            chosen_members = random.sample(human_members, 2)
            title_x = chosen_members[0]
            title_y = chosen_members[1]
            
            result_message = (
                f"üéâ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–≤–∞–Ω–∏—è:\n"
                f"üèÜ –ö–∏—Å–æ —á–∞—Ç–∞: {title_x.mention_html()}\n"
                f"ü•á –•–£–ô —á–∞—Ç–∞: {title_y.mention_html()}"
            )

            sent_message = await update.message.reply_text(result_message, parse_mode="HTML")
            await context.bot.pin_chat_message(chat_id, sent_message.message_id)
            context.chat_data["last_called"] = datetime.now()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ assign_titles: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, cleaned_text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        greetings = [
            "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòÉ",
            "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª! üëç", 
            "–ô–æ—É! –ß—ë –∫–∞–∫? üòé"
        ]

        farewells = [
            "–ü–æ–∫–∞-–ø–æ–∫–∞! üñêÔ∏è",
            "–£–∂–µ —É—Ö–æ–¥–∏—à—å? –ù—É –ª–∞–¥–Ω–æ... üò¢",
            "–î–æ —Å–∫–æ—Ä–æ–≥–æ! –ú–Ω–µ –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ... ü•∫"
        ]

        if any(word in cleaned_text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π"]):
            await update.message.reply_text(random.choice(greetings))
        elif any(word in cleaned_text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–ø—Ä–æ—â–∞–π"]):
            await update.message.reply_text(random.choice(farewells))
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in cleaned_text:
            await update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—ë–≤–∞! üéâ")
        elif "—à—É—Ç–∫–∞" in cleaned_text:
            await self.joke(update, context)
        elif "–ø–æ–≥–æ–¥–∞" in cleaned_text:
            await self.weather(update, context)
        elif any(word in cleaned_text for word in ["–∫–æ–º–∞–Ω–¥—ã", "—á—Ç–æ —É–º–µ–µ—à—å"]):
            await self.info(update, context)
        elif "–∑–≤–∞–Ω–∏—è" in cleaned_text:
            await self.assign_titles(update, context)
        else:
            neutral_answers = [
                "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –ø–æ–Ω—è–ª... ü§î",
                "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å? üßê",
                "–Ø –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å. –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ø—Ä–æ—â–µ! üòÖ",
                "–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å '–õ—ë–≤–∞, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'"
            ]
            await update.message.reply_text(random.choice(neutral_answers))