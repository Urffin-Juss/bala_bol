import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class Feedback:
    def __init__(self, form_url: str, admin_chat_id: Optional[int] = None):
        """
        :param form_url: –°—Å—ã–ª–∫–∞ –Ω–∞ Google Forms
        :param admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.form_url = form_url
        self.admin_chat_id = admin_chat_id
        self.bot_names = ["–ª—ë–≤–∞", "–ª–µ–≤–∞", "–ª–∏–º–æ–Ω–∞–¥–Ω—ã–π", "–±–æ—Ç", "–¥—Ä—É–∂–∏—â–µ"]
        self.command_triggers = [
            "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", 
            "—Ñ–∏–¥–±–µ–∫",
            "—Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
            "–±–∞–≥—Ä–µ–ø–æ—Ä—Ç",
            "–ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ—é"
        ]

    def register_handlers(self, handlers: 'Handlers'):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ Handlers"""
        for trigger in self.command_triggers:
            handlers.add_command_handler(trigger, self.handle_feedback)

    async def handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            user_data = {
                'id': update.effective_user.id,
                'username': update.effective_user.username or '–ù–µ—Ç username',
                'first_name': update.effective_user.first_name or '–ù–µ—Ç –∏–º–µ–Ω–∏'
            }

            
            await update.message.reply_text(
                "üìù –ü–æ–º–æ–≥–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –ª—É—á—à–µ!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", url=self.form_url)]
                ]),
                disable_web_page_preview=True
            )

            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['id']} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

            
            if self.admin_chat_id:
                await context.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data['username']} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def get_usage_examples(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã info"""
        return [
            "- '–õ—ë–≤–∞, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
            "- '–õ–µ–≤–∞, —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ' - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ",
            "- '–±–æ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ—é' - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ"
        ]

    def should_respond(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        text_lower = text.lower()
        return (
            any(trigger in text_lower for trigger in self.command_triggers) and
            any(name in text_lower for name in self.bot_names)
        ) or any(trigger in text_lower for trigger in self.command_triggers)